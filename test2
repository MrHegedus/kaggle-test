{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":73278,"databundleVersionId":8121328,"sourceType":"competition"}],"dockerImageVersionId":30698,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Loading the Data","metadata":{}},{"cell_type":"code","source":"!pip install -U ipywidgets","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"!pip install -q flaml[notebook]","metadata":{"execution":{"iopub.status.busy":"2024-07-07T03:17:46.555411Z","iopub.execute_input":"2024-07-07T03:17:46.555849Z","iopub.status.idle":"2024-07-07T03:18:03.008677Z","shell.execute_reply.started":"2024-07-07T03:17:46.555814Z","shell.execute_reply":"2024-07-07T03:18:03.006982Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"pip install catboost","metadata":{"execution":{"iopub.status.busy":"2024-07-07T03:18:03.010849Z","iopub.execute_input":"2024-07-07T03:18:03.011203Z","iopub.status.idle":"2024-07-07T03:18:15.746659Z","shell.execute_reply.started":"2024-07-07T03:18:03.011170Z","shell.execute_reply":"2024-07-07T03:18:15.745041Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"!pip install -q ray\n!pip install -q sklego","metadata":{"execution":{"iopub.status.busy":"2024-07-07T03:18:15.748671Z","iopub.execute_input":"2024-07-07T03:18:15.749185Z","iopub.status.idle":"2024-07-07T03:18:42.607938Z","shell.execute_reply.started":"2024-07-07T03:18:15.749126Z","shell.execute_reply":"2024-07-07T03:18:42.606139Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\n\n#feature engineering\nfrom sklearn.feature_selection import mutual_info_regression\n\n#transformers and pipeline\nfrom sklearn.base import BaseEstimator, TransformerMixin\nfrom sklearn.compose import ColumnTransformer, make_column_transformer\nfrom sklearn.preprocessing import FunctionTransformer\nfrom sklearn.pipeline import Pipeline, make_pipeline\nfrom sklearn import set_config\n\nfrom flaml import AutoML\nfrom sklego.linear_model import LADRegression\nimport ray\nimport catboost\nprint(\"CatBoost version:\", catboost.__version__)","metadata":{"execution":{"iopub.status.busy":"2024-07-07T03:18:42.611059Z","iopub.execute_input":"2024-07-07T03:18:42.611555Z","iopub.status.idle":"2024-07-07T03:18:48.604439Z","shell.execute_reply.started":"2024-07-07T03:18:42.611502Z","shell.execute_reply":"2024-07-07T03:18:48.603181Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Read the data\ntrain = pd.read_csv('/kaggle/input/playground-series-s4e5/train.csv' ,index_col=[0])\ntest = pd.read_csv('/kaggle/input/playground-series-s4e5/test.csv')\n#original = pd.read_csv('/kaggle/input/crab-age-prediction/CrabAgePrediction.csv')\nsample_submission = pd.read_csv(\"/kaggle/input/playground-series-s4e5/sample_submission.csv\")\n\n# reserved for pipeline\npipe_data = train.copy()\npipe_test = test.copy()\n#pipe_original = original.copy()\n\n# use for preliminary analysis\ntrain_df = train.copy()\ntest_df = test.copy()\n#original_df = original.copy()\ntrain_df.head()","metadata":{"execution":{"iopub.status.busy":"2024-07-07T03:18:48.606458Z","iopub.execute_input":"2024-07-07T03:18:48.607251Z","iopub.status.idle":"2024-07-07T03:18:52.751328Z","shell.execute_reply.started":"2024-07-07T03:18:48.607206Z","shell.execute_reply":"2024-07-07T03:18:52.749983Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"test_df.head()","metadata":{"execution":{"iopub.status.busy":"2024-07-07T03:18:52.752753Z","iopub.execute_input":"2024-07-07T03:18:52.753131Z","iopub.status.idle":"2024-07-07T03:18:52.772688Z","shell.execute_reply.started":"2024-07-07T03:18:52.753099Z","shell.execute_reply":"2024-07-07T03:18:52.771421Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_df.info()","metadata":{"execution":{"iopub.status.busy":"2024-07-07T03:18:52.774239Z","iopub.execute_input":"2024-07-07T03:18:52.774714Z","iopub.status.idle":"2024-07-07T03:18:52.835997Z","shell.execute_reply.started":"2024-07-07T03:18:52.774672Z","shell.execute_reply":"2024-07-07T03:18:52.834573Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_df.nunique().sort_values()","metadata":{"execution":{"iopub.status.busy":"2024-07-07T03:18:52.837642Z","iopub.execute_input":"2024-07-07T03:18:52.838015Z","iopub.status.idle":"2024-07-07T03:18:52.992105Z","shell.execute_reply.started":"2024-07-07T03:18:52.837986Z","shell.execute_reply":"2024-07-07T03:18:52.990759Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Just bookkeeping\nfeature_list = [feature for feature in train_df.columns if not feature  == \"FloodProbability\"]","metadata":{"execution":{"iopub.status.busy":"2024-07-07T03:18:52.993682Z","iopub.execute_input":"2024-07-07T03:18:52.994118Z","iopub.status.idle":"2024-07-07T03:18:52.999991Z","shell.execute_reply.started":"2024-07-07T03:18:52.994078Z","shell.execute_reply":"2024-07-07T03:18:52.998869Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Exploratory Data Analysis","metadata":{}},{"cell_type":"code","source":"sns.kdeplot(train_df['FloodProbability'], fill=True)\nplt.title('Density of Flood Probability')\nplt.xlabel('Flood Probability')\nplt.ylabel('Density')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-07T03:18:53.005952Z","iopub.execute_input":"2024-07-07T03:18:53.007134Z","iopub.status.idle":"2024-07-07T03:18:58.733594Z","shell.execute_reply.started":"2024-07-07T03:18:53.007083Z","shell.execute_reply":"2024-07-07T03:18:58.732382Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"fig, ax = plt.subplots(3, 3, figsize=(20, 20))\nfor var, subplot in zip(feature_list, ax.flatten()):\n    sns.scatterplot(x=var, y='FloodProbability',  data=train_df, ax=subplot )","metadata":{"execution":{"iopub.status.busy":"2024-07-07T03:18:58.735627Z","iopub.execute_input":"2024-07-07T03:18:58.736044Z","iopub.status.idle":"2024-07-07T03:19:39.615675Z","shell.execute_reply.started":"2024-07-07T03:18:58.736004Z","shell.execute_reply":"2024-07-07T03:19:39.614381Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Display correlations between features and Age on heatmap.\n\nsns.set(font_scale=1.1)\ncorrelation_train = train_df.corr()\nmask = np.triu(correlation_train.corr())\nplt.figure(figsize=(15, 15))\nsns.heatmap(correlation_train,\n            annot=True,\n            fmt='.1f',\n            cmap='coolwarm',\n            square=True,\n            mask=mask,\n            linewidths=1,\n            cbar=False);","metadata":{"execution":{"iopub.status.busy":"2024-07-07T03:19:39.617184Z","iopub.execute_input":"2024-07-07T03:19:39.617565Z","iopub.status.idle":"2024-07-07T03:19:42.467287Z","shell.execute_reply.started":"2024-07-07T03:19:39.617532Z","shell.execute_reply":"2024-07-07T03:19:42.465869Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"y=train_df['FloodProbability']","metadata":{"execution":{"iopub.status.busy":"2024-07-07T03:19:42.469255Z","iopub.execute_input":"2024-07-07T03:19:42.470091Z","iopub.status.idle":"2024-07-07T03:19:42.476132Z","shell.execute_reply.started":"2024-07-07T03:19:42.470048Z","shell.execute_reply":"2024-07-07T03:19:42.474825Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# determine the mutual information for numerical features\nmutual_df = train_df[feature_list]\n\nmutual_info = mutual_info_regression(mutual_df, y, random_state=1)\n\nmutual_info = pd.Series(mutual_info)\nmutual_info.index = mutual_df.columns\npd.DataFrame(mutual_info.sort_values(ascending=False), columns = [\"MI_score\"] ).style.background_gradient(\"cool\")","metadata":{"execution":{"iopub.status.busy":"2024-07-07T03:19:42.477564Z","iopub.execute_input":"2024-07-07T03:19:42.478005Z","iopub.status.idle":"2024-07-07T03:27:24.526865Z","shell.execute_reply.started":"2024-07-07T03:19:42.477966Z","shell.execute_reply":"2024-07-07T03:27:24.525518Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"log_features = [f\"log_{col}\" for col in feature_list]\n\nfor df in [train_df, test_df]:\n    df['fsum'] = df[feature_list].sum(axis=1)\n    df['fstd'] = df[feature_list].std(axis=1)\n    df['special1'] = df['fsum'].isin(np.arange(72, 76))\n    df['fskew'] = df[feature_list].skew(axis=1)\n    df['fkurtosis'] = df[feature_list].kurtosis(axis=1)\n    df['fsum2'] = df[feature_list].product(axis=1)\n    for col in feature_list:\n        df[f\"log_{col}\"] = np.log10(df[col]+1e-4) \n    df['log_sum'] = df[log_features].sum(axis=1)\n    ","metadata":{"execution":{"iopub.status.busy":"2024-07-07T03:27:24.528554Z","iopub.execute_input":"2024-07-07T03:27:24.528934Z","iopub.status.idle":"2024-07-07T03:27:29.431410Z","shell.execute_reply.started":"2024-07-07T03:27:24.528901Z","shell.execute_reply":"2024-07-07T03:27:29.429908Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"new_features = [\"fsum\", 'fstd', 'special1', 'fskew', 'fkurtosis', 'fsum2', 'log_sum']+log_features","metadata":{"execution":{"iopub.status.busy":"2024-07-07T03:27:29.433052Z","iopub.execute_input":"2024-07-07T03:27:29.433438Z","iopub.status.idle":"2024-07-07T03:27:29.439182Z","shell.execute_reply.started":"2024-07-07T03:27:29.433407Z","shell.execute_reply":"2024-07-07T03:27:29.437851Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"fig, ax = plt.subplots(3,3, figsize=(20, 20))\nfor var, subplot in zip(new_features, ax.flatten()):\n    sns.scatterplot(x=var, y='FloodProbability',  data=train_df, ax=subplot)\n","metadata":{"execution":{"iopub.status.busy":"2024-07-07T03:27:29.441040Z","iopub.execute_input":"2024-07-07T03:27:29.441597Z","iopub.status.idle":"2024-07-07T03:28:11.088385Z","shell.execute_reply.started":"2024-07-07T03:27:29.441549Z","shell.execute_reply":"2024-07-07T03:28:11.087111Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"mutual_df = train_df[new_features]\n\nmutual_info = mutual_info_regression(mutual_df, y, random_state=1)\n\nmutual_info = pd.Series(mutual_info)\nmutual_info.index = mutual_df.columns\npd.DataFrame(mutual_info.sort_values(ascending=False), columns = [\"New_Feature_MI\"] ).style.background_gradient(\"cool\")","metadata":{"execution":{"iopub.status.busy":"2024-07-07T03:28:11.090036Z","iopub.execute_input":"2024-07-07T03:28:11.090418Z","iopub.status.idle":"2024-07-07T03:34:58.815183Z","shell.execute_reply.started":"2024-07-07T03:28:11.090374Z","shell.execute_reply":"2024-07-07T03:34:58.811553Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"class FeatureCreator(BaseEstimator, TransformerMixin):\n    def __init__(self, add_attributes=True,feature_list=feature_list):\n        self.feature_list=feature_list\n        self.add_attributes = add_attributes\n        \n    def fit(self, X, y=None):\n        \n        return self\n    \n    def transform(self, X):\n        \n        if self.add_attributes:\n            df = X.copy()\n            \n            \n            df['fsum'] = df[feature_list].sum(axis=1)\n            df['fstd'] = df[feature_list].std(axis=1)\n            df['special1'] = df['fsum'].isin(np.arange(72, 76))\n            df['fskew'] = df[feature_list].skew(axis=1)\n            df['fkurtosis'] = df[feature_list].kurtosis(axis=1)\n            df['fsum2'] = df[feature_list].product(axis=1)\n            for col in feature_list:\n                df[f\"log_{col}\"] = np.log10(df[col]+1e-4) \n            df['log_sum'] = df[log_features].sum(axis=1)\n            df.drop(feature_list,axis=1,inplace=True)\n            df.drop('FloodProbability',axis=1,inplace=True)\n            \n            \n            return df\n        else:\n            return X","metadata":{"execution":{"iopub.status.busy":"2024-07-07T03:35:06.169980Z","iopub.execute_input":"2024-07-07T03:35:06.170387Z","iopub.status.idle":"2024-07-07T03:35:06.184241Z","shell.execute_reply.started":"2024-07-07T03:35:06.170357Z","shell.execute_reply":"2024-07-07T03:35:06.182194Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Dropping the actual features as the MI for new features is higher than them**","metadata":{}},{"cell_type":"markdown","source":"# FLAML model setup","metadata":{}},{"cell_type":"code","source":"#ray.shutdown()\nCreator = FeatureCreator(add_attributes = True)\n#ray.init()","metadata":{"execution":{"iopub.status.busy":"2024-07-07T03:35:10.258028Z","iopub.execute_input":"2024-07-07T03:35:10.258562Z","iopub.status.idle":"2024-07-07T03:35:10.265070Z","shell.execute_reply.started":"2024-07-07T03:35:10.258512Z","shell.execute_reply":"2024-07-07T03:35:10.263697Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"y = pipe_data['FloodProbability']\npipe_data.head()","metadata":{"execution":{"iopub.status.busy":"2024-07-07T03:35:12.746792Z","iopub.execute_input":"2024-07-07T03:35:12.747193Z","iopub.status.idle":"2024-07-07T03:35:12.768861Z","shell.execute_reply.started":"2024-07-07T03:35:12.747162Z","shell.execute_reply":"2024-07-07T03:35:12.767559Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"automl = AutoML()\n\nautoml_pipeline = Pipeline([\n    ('Creator', Creator),\n    (\"automl\", automl)\n])\nautoml_pipeline","metadata":{"execution":{"iopub.status.busy":"2024-07-07T03:35:13.096169Z","iopub.execute_input":"2024-07-07T03:35:13.096603Z","iopub.status.idle":"2024-07-07T03:35:13.115313Z","shell.execute_reply.started":"2024-07-07T03:35:13.096568Z","shell.execute_reply":"2024-07-07T03:35:13.113884Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Specify automl goal and constraint\nautoml_settings = {\n    \"time_budget\": 3*60*60,  # total running time in seconds\n    \"task\": 'regression',  # task type\n    \"seed\": 24545678,  # random seed\n    \"metric\" : 'r2',\n#    \"estimator_list\" :['catboost','lgbm'],\n    \n    \"eval_method\" : 'cv',\n    \"n_splits\" : 5,\n    \"n_jobs\": -1,\n    \"ensemble\" : True,\n#        \"ensemble\": {\n#        \"final_estimator\": LADRegression(),\n#        \"passthrough\": True,\n#    },\n\n    \n}\n\npipeline_settings = {f\"automl__{key}\": value for key, value in automl_settings.items()}","metadata":{"execution":{"iopub.status.busy":"2024-07-07T03:44:48.153721Z","iopub.execute_input":"2024-07-07T03:44:48.154162Z","iopub.status.idle":"2024-07-07T03:44:48.161852Z","shell.execute_reply.started":"2024-07-07T03:44:48.154123Z","shell.execute_reply":"2024-07-07T03:44:48.160586Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"automl_pipeline = automl_pipeline.fit(pipe_data, y, **pipeline_settings)","metadata":{"execution":{"iopub.status.busy":"2024-07-07T03:44:48.842029Z","iopub.execute_input":"2024-07-07T03:44:48.842441Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"automl.best_config","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"pipe_test['FloodProbability']=0\npreds_test =  automl_pipeline.predict(pipe_test)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"output = pd.DataFrame({'id': pipe_test['id'],\n                       'FloodProbability': preds_test})\noutput.to_csv('submission.csv', index=False)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"output.head()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import pickle\nwith open('fautoml.pkl', 'wb') as f:\n    pickle.dump(automl, f, pickle.HIGHEST_PROTOCOL)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Comparision with standalone models","metadata":{}},{"cell_type":"markdown","source":"**1- LGBM** R2=0.8686","metadata":{}},{"cell_type":"code","source":"X = Creator.fit_transform(pipe_data) ","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import pandas as pd\nimport lightgbm as lgb\n\n# Assuming 'pipe_data' is your DataFrame and it's already loaded\n # Features\ny = pipe_data['FloodProbability']  # Target variable\n\n# Splitting the dataset into training and testing sets\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Setting up the model with specified parameters\nmodel = lgb.LGBMRegressor(\n    n_estimators=171,\n    num_leaves=188,\n    min_child_samples=70,\n    learning_rate=0.06472757650877775,\n    log_max_bin=7,\n    colsample_bytree=0.9464306780305121,\n    reg_alpha=0.015232914830485925,\n    reg_lambda=0.02378899437400752\n)\n\n# Training the model\nmodel.fit(X_train, y_train)\n\n# Optionally, evaluate the model\nfrom sklearn.metrics import r2_score\n\ny_pred = model.predict(X_test)\nr2 = r2_score(y_test, y_pred)\n\nprint(\"R^2 score:\", r2)\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"pipe_test['FloodProbability']=0\npreds_test =  Creator.fit_transform(pipe_test)\npreds_test.drop('id',axis=1,inplace=True)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"preds_test1=model.predict(preds_test)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"output = pd.DataFrame({'id': pipe_test['id'],\n                       'FloodProbability': preds_test1})\noutput.to_csv('submissionlgbm.csv', index=False)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"output.head()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**2- Catboost**\nR2=0.8669","metadata":{}},{"cell_type":"code","source":"from catboost import CatBoostRegressor\n# Setting up the model with specified parameters\nmodel2 = CatBoostRegressor(\n    learning_rate=0.2,\n    n_estimators=51,\n    early_stopping_rounds=11\n)\n\n# Training the model\nmodel2.fit(X_train, y_train, eval_set=(X_test, y_test), verbose=0)  # Set verbose to False to avoid logging too much information\n\n# Optionally, evaluate the model\nfrom sklearn.metrics import r2_score\n\ny_pred = model2.predict(X_test)\nr2 = r2_score(y_test, y_pred)\n\nprint(\"R^2 score:\", r2)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"preds_test2=model2.predict(preds_test)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"output2 = pd.DataFrame({'id': pipe_test['id'],\n                       'FloodProbability': preds_test2})\noutput2.to_csv('submissioncat.csv', index=False)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"output2","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Ensemble model with LDA Regression to combine the predictions. ** \n\nR2= 0.865","metadata":{}},{"cell_type":"code","source":"from joblib import load\n\n# Specify the path to the model file\nmodel_path = '/kaggle/working/fautoml.pkl'\n\n# Load the model\nmodel3 = load(model_path)\n\n# Now `model` is ready to be used for predictions or further analysis\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"preds_test3=model3.predict(preds_test)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"output3 = pd.DataFrame({'id': pipe_test['id'],\n                       'FloodProbability': preds_test3})\noutput3.to_csv('submissionensemble.csv', index=False)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"output3.head()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}